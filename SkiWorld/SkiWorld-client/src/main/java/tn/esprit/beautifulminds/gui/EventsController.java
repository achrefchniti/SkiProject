package tn.esprit.beautifulminds.gui;

import java.net.URL;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.ResourceBundle;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;

import javafx.beans.property.SimpleStringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.DatePicker;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableRow;
import javafx.scene.control.TableView;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.input.KeyEvent;
import tn.esprit.beautifulminds.persistence.Event;
import tn.esprit.beautifulminds.services.crud.EventServicesRemote;

public class EventsController implements Initializable {

	final ObservableList<String> pl = FXCollections.observableArrayList();

	public ObservableList<String> remplir() {

		pl.add("bla bla");
		pl.add("bla blo");
		pl.add("bla bli");
		pl.add("bla blu");
		pl.add("bla ble");
		return pl;

	}

	@FXML
	private TableView<Event> tableevent;
	@FXML
	private TableColumn<Event, String> titleevent;
	@FXML
	private TableColumn<Event, String> placeevent;
	@FXML
	private TableColumn<Event, String> startdateevent;
	@FXML
	private TableColumn<Event, String> finishdateevent;
	@FXML
	private Button deletebut;
	@FXML
	private Button modifyevent;
	@FXML
	private TextField SearchID;
	@FXML
	private Button deletebut1;
	@FXML
	private TextArea description;
	@FXML
	private ComboBox place;
	@FXML
	private DatePicker finishdate;
	@FXML
	private DatePicker startdate;
	@FXML
	private TextField title;

	private static ObservableList<Event> liste1 = FXCollections.observableArrayList();

	public static List<Event> listAllEvents = null;

	// Event Listener on AnchorPane.onKeyTyped
	@FXML
	public void SearchAction(KeyEvent event) {
		// TODO Autogenerated
	}

	// Event Listener on Button[#deletebut].onAction
	@FXML
	public void DeleteAction(ActionEvent event) {
		// TODO Autogenerated

		int selectedIndex = tableevent.getSelectionModel().getSelectedIndex();
		if (selectedIndex >= 0) {
			Context context = null;
			try {
				context = new InitialContext();
			} catch (NamingException e2) {
				// TODO Auto-generated catch block
				e2.printStackTrace();
			}
			EventServicesRemote esr = null;
			try {
				esr = (EventServicesRemote) context.lookup(
						"SkiWorld-ear/SkiWorld-ejb/EventServices!tn.esprit.beautifulminds.services.crud.EventServicesRemote");
			} catch (NamingException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}

			int num = ((Event) tableevent.getSelectionModel().getSelectedItem()).getEventId();
			Event c = esr.findEventById(num);

			esr.deleteEvent(c);
			tableevent.getItems().remove(c);
			tableevent.getItems().remove(selectedIndex);
			Alert alert = new Alert(Alert.AlertType.INFORMATION);
			alert.setTitle("Delete");
			alert.setContentText("Event Deleted !");
			alert.setHeaderText(null);
			alert.showAndWait();

		} else {
			Alert alert = new Alert(Alert.AlertType.INFORMATION);
			alert.setTitle("Delete");
			alert.setContentText("No Events selected !");
			alert.setHeaderText(null);
			alert.showAndWait();

		}
	}

	// Event Listener on Button[#modifyevent].onAction
	@FXML
	public void ModifyAction(ActionEvent event) throws NamingException, ParseException {
		// TODO Autogenerated

		Event mat = new Event();
		Context context = null;
		try {
			context = new InitialContext();
		} catch (NamingException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		}
		EventServicesRemote esr = null;
		try {
			esr = (EventServicesRemote) context.lookup(
					"SkiWorld-ear/SkiWorld-ejb/EventServices!tn.esprit.beautifulminds.services.crud.EventServicesRemote");
		} catch (NamingException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

		String sD = startdate.getValue().toString();
		SimpleDateFormat sdd = new SimpleDateFormat("yyyy-MM-dd");
		Date d1 = sdd.parse(sD);
		java.sql.Date dateSql1 = new java.sql.Date(d1.getTime());

		String fD = finishdate.getValue().toString();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Date d2 = sdf.parse(fD);
		java.sql.Date dateSql2 = new java.sql.Date(d2.getTime());

		mat.setDescription(deletebut.getText());
		mat.setTitle(title.getText());
		mat.setPlace(place.getValue().toString());
		mat.setEventId(currentID);
		mat.setDate_debut(dateSql1);
		mat.setDate_fin(dateSql2);

		esr.updateEvent(mat);

		tableevent.getItems().clear();
		initAllListEvents();
		tableevent.refresh();

		Alert alert = new Alert(Alert.AlertType.INFORMATION);

		alert.setTitle("Event Update");
		alert.setContentText("Event Successfully Updated ! ");
		alert.showAndWait();

	}

	int currentID;

	// Event Listener on TextField[#SearchID].onAction
	@FXML
	public void SearchAction(ActionEvent event) {
		// TODO Autogenerated
	}

	// Event Listener on Button[#deletebut1].onAction
	public static void initAllListEvents() {

		Context context = null;
		try {
			context = new InitialContext();
		} catch (NamingException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		}
		EventServicesRemote esr = null;
		try {
			esr = (EventServicesRemote) context.lookup(
					"SkiWorld-ear/SkiWorld-ejb/EventServices!tn.esprit.beautifulminds.services.crud.EventServicesRemote");
		} catch (NamingException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

		// TODO Auto-generated method stub
		List<Event> Event = esr.findAllEvents();
		Event.stream().forEach(e -> liste1.add(e));

	}

	@FXML
	public void AddAction(ActionEvent event) throws NamingException, ParseException {
		// TODO Autogenerated

		Context context = new InitialContext();
		EventServicesRemote esr = (EventServicesRemote) context.lookup(
				"SkiWorld-ear/SkiWorld-ejb/EventServices!tn.esprit.beautifulminds.services.crud.EventServicesRemote");

		String sD = startdate.getValue().toString();
		SimpleDateFormat sdd = new SimpleDateFormat("yyyy-MM-dd");
		Date d1 = sdd.parse(sD);
		java.sql.Date dateSql1 = new java.sql.Date(d1.getTime());

		String fD = finishdate.getValue().toString();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Date d2 = sdf.parse(fD);
		java.sql.Date dateSql2 = new java.sql.Date(d2.getTime());

		Event e = new Event(dateSql1, dateSql2, title.getText(), place.getValue().toString(), description.getText());

		Alert alert = new Alert(Alert.AlertType.ERROR);

		alert.setTitle("Date selection ERROR");
		alert.setContentText("Start Date is Before today ! ");

		Alert alert1 = new Alert(Alert.AlertType.ERROR);

		alert1.setTitle("Date selection ERROR");
		alert1.setContentText("Finish Date is before Start Date ! ");

		Alert alert2 = new Alert(Alert.AlertType.INFORMATION);

		alert2.setTitle("Event");
		alert2.setContentText("Event Successfully Added ! ");

		Date sysdate = new Date();

		if (dateSql1.before(sysdate)) {
			alert.showAndWait();
			System.out.println(dateSql1);
		} else if (dateSql2.before(dateSql1)) {
			alert1.showAndWait();
			System.out.println("2");
		} else {
			esr.addEvent(e);
			alert2.showAndWait();
		}

		tableevent.getItems().clear();
		initAllListEvents();
		tableevent.refresh();

	}

	@Override
	public void initialize(URL location, ResourceBundle resources) {
		// TODO Auto-generated method stub
		initAllListEvents();
		place.setItems(remplir());

		Context context = null;
		try {
			context = new InitialContext();
		} catch (NamingException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		}
		EventServicesRemote esr = null;
		try {
			esr = (EventServicesRemote) context.lookup(
					"SkiWorld-ear/SkiWorld-ejb/EventServices!tn.esprit.beautifulminds.services.crud.EventServicesRemote");
		} catch (NamingException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

		// TODO Auto-generated method stub
		List<Event> events = esr.findAllEvents();
		events.stream().forEach(e -> liste1.add(e));
		tableevent.setItems(liste1);

		titleevent.setCellValueFactory(
				cellData -> new SimpleStringProperty(String.valueOf(cellData.getValue().getTitle())));

		placeevent.setCellValueFactory(
				cellData -> new SimpleStringProperty(String.valueOf(cellData.getValue().getPlace())));
		startdateevent.setCellValueFactory(
				cellData -> new SimpleStringProperty(String.valueOf(cellData.getValue().getDate_debut())));
		finishdateevent.setCellValueFactory(
				cellData -> new SimpleStringProperty(String.valueOf(cellData.getValue().getDate_fin())));

		tableevent.setRowFactory(tv -> {
			TableRow<Event> row = new TableRow<>();
			row.setOnMouseClicked(event -> {
				if (event.getClickCount() == 1 && (!row.isEmpty())) {
					Event rowData = row.getItem();
					currentID = rowData.getEventId();

					title.setText(rowData.getTitle());
					description.setText(rowData.getDescription());
					place.setValue(rowData.getPlace());

				}
			});
			return row;
		});

	}
}

package tn.esprit.beautifulminds.gui;

import java.io.IOException;
import java.net.URL;
import java.util.List;
import java.util.ResourceBundle;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;

import javafx.beans.property.SimpleStringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableRow;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import tn.esprit.beautifulminds.persistence.Material;
import tn.esprit.beautifulminds.services.crud.MaterialServicesRemote;

public class MaterialServicesController implements Initializable {
	@FXML
	private TableView<Material> materialtable;
	@FXML
	private TableColumn<Material, String> namecolumn;
	@FXML
	private TableColumn<Material, String> providercolumn;
	@FXML
	private TextField name;
	@FXML
	private TextField provider;
	@FXML
	private Button addbut;
	@FXML
	private Button modifybut;
	@FXML
	private Button deletebut;

	int currentID;

	private static ObservableList<Material> liste1 = FXCollections.observableArrayList();

	// Event Listener on Button[#addbut].onAction
	@FXML
	public void AddAction(ActionEvent event) throws NamingException {
		// TODO Autogenerated

		Context context = new InitialContext();
		MaterialServicesRemote msr = (MaterialServicesRemote) context.lookup(
				"SkiWorld-ear/SkiWorld-ejb/MaterialServices!tn.esprit.beautifulminds.services.crud.MaterialServicesRemote");

		Material mat = new Material(name.getText(), provider.getText());
		Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
		alert.setTitle("Matetial added");

		msr.addMaterial(mat);

		materialtable.getItems().clear();
		initAllListMaterials();
		materialtable.refresh();

		Alert alert2 = new Alert(Alert.AlertType.INFORMATION);

		alert2.setTitle("Material");
		alert2.setContentText("Material Successfully Added ! ");
		alert2.showAndWait();

	}

	private static ObservableList<Material> listS = FXCollections.observableArrayList();

	// Event Listener on Button[#modifybut].onAction
	@FXML
	public void ModifyAction(ActionEvent event) {
		// TODO Autogenerated
		Material mat = new Material();
		Context context = null;
		try {
			context = new InitialContext();
		} catch (NamingException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		}
		MaterialServicesRemote msr = null;
		try {
			msr = (MaterialServicesRemote) context.lookup(
					"SkiWorld-ear/SkiWorld-ejb/MaterialServices!tn.esprit.beautifulminds.services.crud.MaterialServicesRemote");
		} catch (NamingException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		mat.setName(name.getText());
		mat.setFournisseur(provider.getText());
		mat.setMaterialId(currentID);
		msr.updateMaterial(mat);
		materialtable.getItems().clear();
		initAllListMaterials();
		materialtable.refresh();

		Alert alert2 = new Alert(Alert.AlertType.INFORMATION);

		alert2.setTitle("Material Update");
		alert2.setContentText("Material Successfully Modified ! ");

		alert2.showAndWait();

	}

	@FXML
	public void DeleteAction(ActionEvent event) throws IOException {
		int selectedIndex = materialtable.getSelectionModel().getSelectedIndex();
		if (selectedIndex >= 0) {
			Context context = null;
			try {
				context = new InitialContext();
			} catch (NamingException e2) {
				// TODO Auto-generated catch block
				e2.printStackTrace();
			}
			MaterialServicesRemote msr = null;
			try {
				msr = (MaterialServicesRemote) context.lookup(
						"SkiWorld-ear/SkiWorld-ejb/MaterialServices!tn.esprit.beautifulminds.services.crud.MaterialServicesRemote");
			} catch (NamingException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}

			int num = materialtable.getSelectionModel().getSelectedItem().getMaterialId();
			Material c = msr.findMaterialById(num);

			msr.deleteMaterial(c);
			materialtable.getItems().remove(c);
			materialtable.getItems().remove(selectedIndex);
			Alert alert = new Alert(Alert.AlertType.INFORMATION);
			alert.setTitle("Delete");
			alert.setContentText("Material Deleted!");
			alert.setHeaderText(null);
			alert.showAndWait();

		} else {
			Alert alert = new Alert(Alert.AlertType.INFORMATION);
			alert.setTitle("Delete");
			alert.setContentText("No selected Item !");
			alert.setHeaderText(null);
			alert.showAndWait();

		}

	}
	// Event Listener on Button[#deletebut].onAction

	public static void initAllListMaterials() {

		Context context = null;
		try {
			context = new InitialContext();
		} catch (NamingException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		}
		MaterialServicesRemote msr = null;
		try {
			msr = (MaterialServicesRemote) context.lookup(
					"SkiWorld-ear/SkiWorld-ejb/MaterialServices!tn.esprit.beautifulminds.services.crud.MaterialServicesRemote");
		} catch (NamingException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

		// TODO Auto-generated method stub
		List<Material> Material = msr.findAllMaterials();
		Material.stream().forEach(e -> liste1.add(e));

	}

	@Override
	public void initialize(URL location, ResourceBundle resources) {
		// TODO Auto-generated method stub
		initAllListMaterials();
		materialtable.setItems(liste1);

		namecolumn.setCellValueFactory(
				cellData -> new SimpleStringProperty(String.valueOf(cellData.getValue().getName())));

		providercolumn.setCellValueFactory(
				cellData -> new SimpleStringProperty(String.valueOf(cellData.getValue().getFournisseur())));
		// materialtable.setRowFactory(tv->{
		// TableRow<Material> row =new TableRow<>();
		// Material rowData =row.getItem();
		//
		// name.setText(rowData.getName());
		// provider.setText(rowData.getFournisseur());
		//
		// return row;
		// });

		materialtable.setRowFactory(tv -> {
			TableRow<Material> row = new TableRow<>();
			row.setOnMouseClicked(event -> {
				if (event.getClickCount() == 1 && (!row.isEmpty())) {
					Material rowData = row.getItem();
					currentID = rowData.getMaterialId();

					name.setText(rowData.getName());
					provider.setText(rowData.getFournisseur());

				}
			});
			return row;
		});

	}
}
